//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \file radioactivedecay/rdecay01/rdecay01.cc
/// \brief Main program of the radioactivedecay/rdecay01 example
//
//
// $Id: rdecay01.cc 68017 2013-03-13 13:29:53Z gcosmo $
// 
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo...... 

#include "DetectorConstruction.hh"//
#include "ActionInitialization.hh"//
#include "PrimaryGeneratorAction.hh"
#include "PhysicsList.hh"


#ifdef G4MULTITHREADED
#include "G4MTRunManager.hh"//
#else
#include "G4RunManager.hh"//
#include "G4ScoringManager.hh"//
#endif

#include "G4UImanager.hh"//
#include "G4UIcommand.hh"//

#include "Randomize.hh"

#include "UserScoreWriter.hh"

#ifdef G4VIS_USE
#include "G4VisExecutive.hh"//
#endif

#ifdef G4UI_USE
#include "G4UIExecutive.hh"//
#endif




int main(int argc,char** argv) {
 
 // Construct the run manager
 //
#ifdef G4MULTITHREADED
 G4MTRunManager * runManager = new G4MTRunManager;
 runManager->SetNumberOfThreads(4);
#else
 G4RunManager * runManager = new G4RunManager;
#endif

 // Activate UI-command base scorer
 G4ScoringManager * scManager = G4ScoringManager::GetScoringManager();
 scManager->SetVerboseLevel(1);
 
  //choose the Random engine
  CLHEP::HepRandom::setTheEngine(new CLHEP::RanecuEngine);
  
//====================================================================
// Un-comment this line for user defined score writer
//    scManager->SetScoreWriter(new RE03UserScoreWriter());
//====================================================================

  // Set mandatory initialization classes
  //
  DetectorConstruction* detConstruction = new DetectorConstruction();
  runManager->SetUserInitialization(detConstruction);
  
  G4VUserPhysicsList* physics = new PhysicsList();
  runManager->SetUserInitialization(physics);
      
  ActionInitialization* actions = new ActionInitialization();
  runManager->SetUserInitialization(actions);

#ifdef G4VIS_USE
 // Visualization manager
 G4VisManager* visManager = new G4VisExecutive;
 visManager->Initialize();
#endif
  // Initialize G4 kernel
  //
  runManager->Initialize();

  // get the pointer to the User Interface manager 
  G4UImanager* UImanager = G4UImanager::GetUIpointer(); 
/*
 if (argc==1)   // Define UI session for interactive mode
 {
#ifdef G4UI_USE
   G4UIExecutive* ui = new G4UIExecutive(argc, argv);
#ifdef G4VIS_USE
   UImanager->ApplyCommand("/control/execute vis.mac");    
#endif
   ui->SessionStart();
   delete ui;
#endif
 }
 else           // Batch mode
 { 
   G4String command = "/control/execute ";
   G4String fileName = argv[1];
   UImanager->ApplyCommand(command+fileName);
 }
*/
if (argc!=1)   // batch mode  
    { 
     G4String command = "/control/execute ";
     G4String fileName = argv[1];
     UI->ApplyCommand(command+fileName);  
    }
    
  else           // define visualization and UI terminal for interactive mode 
    { 
#ifdef G4UI_USE
     G4UIExecutive * ui = new G4UIExecutive(argc,argv);      
#ifdef G4VIS_USE
     UI->ApplyCommand("/control/execute vis.mac");          
#endif
     ui->SessionStart();
     delete ui;
#endif
    }

      
   
 

#ifdef G4VIS_USE
 delete visManager;
#endif
 delete runManager;

 return 0;
 }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo..... 

